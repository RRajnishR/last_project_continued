<!DOCTYPE html>
<html lang="en">

<head>
    <title>Speaking Section</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <link href="https://fonts.googleapis.com/css?family=Hepta+Slab|Lato&display=swap" rel="stylesheet">
    <link href="/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
    <link href="/css/vid/video-js.min.css" rel="stylesheet">
    <link href="/css/vid/videojs.record.css" rel="stylesheet">

    <script src="/js/vid/video.min.js"></script>
    <script src="/js/vid/RecordRTC.js"></script>
    <script src="/js/vid/adapter.js"></script>

    <script src="/js/vid/videojs.record.js"></script>

    <style>
        .btn-bd-download {
            font-weight: 600;
            color: #ffe484;
            border-color: #ffe484;
        }
        .btn-bd-download:hover{
            color: darkgoldenrod;
            border-color: darkgoldenrod;
        }
        .sidebar{
            font-family: 'Hepta Slab', serif;
            font-size: 12px;
        }
        .sidebar_secname, .sidebar_time{
            text-align: center;
            color: #fff;
        }
        .exam {
            height: 91.5vh;
            overflow-x: hidden;
            overflow-y: auto;
            word-wrap:normal;
            text-align: justify-all;
        }
        .seperator {
            color: #ffe484;
            border-color: #ffe484;
        }
        .sidebar_uservideo video{
            width: 100%;
        }
        .sidebar_submit{
            text-align: center;
        }
        .card{
            margin: 2%;
            -webkit-box-shadow: 3px 3px 8px -1px rgba(77,49,77,1);
            -moz-box-shadow: 3px 3px 8px -1px rgba(77,49,77,1);
            box-shadow: 3px 3px 8px -1px rgba(77,49,77,1);
        }
        .card-body{
            margin: 0 auto;
        }
        .form-group{
            margin-left: 3%;
            margin-right: 3%;
        }
        .hidethis{
            display: none;
        }
        .card-text {
            margin-left: 1%;
            margin-right: 1%;
            text-align:justify;
        }
        #wrapper_1, #wrapper_2, #wrapper_3{
            display:none;
        }
    </style>
</head>

<body>

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <a class="navbar-brand" href="#">Online Proficiency Test</a>
        <div class="ml-auto">
            <a class="btn btn-bd-download navbar-btn navbat-text"
            href="/user/exam/stop/{{examid}}" title="Stop and Exit the Exam"><i class="far fa-window-close"></i></a>
        </div>
    </nav>

    <div class="container-fluid">
        <div class="row">
            <div class="col-md-9 exam">
                <div class="card">
                    <div class="card-text">
                        <h6>Directed Interview Questions</h6>
                        {{{doc.directed_interview_ques}}}
                    </div>  
                    <div class="card-body">
                        <button class="btn btn-primary btn-xs" id="startdiq" onclick="startdiq(this.id)"><i class="fas fa-compact-disc"></i> Start Recording </button>
                        <div id="wrapper_1">
                            <video id="diq" class="video-js vjs-default-skin"></video><br/>
                            <button class="btn btn-danger btn-xs" onclick="stopdiq()"><i class="far fa-stop-circle"></i> Stop Recording </button>
                        </div>
                    </div>
                </div>
                <div class="card">
                    <div class="card-text">
                        <h6>Interactive Questions</h6>
                        {{{doc.interaction_ques}}}
                    </div>  
                    <div class="card-body">
                        <button class="btn btn-primary btn-xs" id="startiq" onclick="startiq(this.id)"><i class="fas fa-compact-disc"></i> Start Recording </button>
                        <div id="wrapper_2">
                            <video id="iq" class="video-js vjs-default-skin"></video><br/>
                            <button class="btn btn-danger btn-xs" onclick="stopiq()"><i class="far fa-stop-circle"></i> Stop Recording </button>
                        </div>
                    </div>
                </div>
                <div class="card">
                    <div class="card-text">
                        <h6>Point of view</h6>
                        {{{doc.point_of_view_ques}}}
                    </div>  
                    <div class="card-body">
                        <button class="btn btn-primary btn-xs" id="startpov" onclick="startpov(this.id)"><i class="fas fa-compact-disc"></i> Start Recording </button>
                        <div id="wrapper_3">
                            <video id="pov" class="video-js vjs-default-skin"></video><br/>
                            <button class="btn btn-danger btn-xs" onclick="stoppov()"><i class="far fa-stop-circle"></i> Stop Recording </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3 bg-dark sidebar">
                <div class="sidebar_secname">
                    <h3>Speaking Section</h3>
                </div>
                <hr class="seperator">
                <div class="sidebar_uservideo">
                    <video width="100%"  id="video" autoplay muted>
                        Error!
                    </video>
                </div>
                <hr class="seperator">
                <div class="sidebar_userdetails table-responsive">
                    <table class="table table-sm table-borderless table-dark">
                        <tr>
                            <td>Examinee</td>
                            <td>:</td>
                            <td>{{fullname}}</td>
                        </tr>
                        <tr>
                            <td>Language</td>
                            <td>:</td>
                            <td>{{language}}</td>
                        </tr>
                        <tr>
                            <td>Level</td>
                            <td>:</td>
                            <td>{{lang_level}}</td>
                        </tr>
                    </table>
                </div>
                <hr class="seperator">
                <div class="sidebar_time">
                    <h5>Time Remaining: <span id="time"></span></h5>
                </div>
                <hr class="seperator">
                <div class="sidebar_submit">
                    <button class=" btn btn-success btn-lg" id="submitbutton">
                        <i class="fas fa-save"></i> Finish Exam </i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <script>
        $(document).keydown(function (event) {
            if(event.keyCode == 123 || event.keyCode == 16 || event.keyCode == 17 || event.keyCode == 18){
                alert('Ctrl, Alt and Other Keys are not allowed');
                return false;
            }
        });
        function isMobileDevice() {
            if((typeof window.orientation !== "undefined") || (navigator.userAgent.indexOf('IEMobile') !== -1)){
                alert("It seems that you're trying to access this site via a mobile device. We advice you to start the exam with a laptop/pc with a working webcam and Mic.");
                document.body.innerHTML = "<h1>It seems that you're trying to access this site via a mobile device. We advice you to start the exam with a laptop/pc with a working webcam and Mic.</h1>";
            } 
        }
        isMobileDevice();
        //checks if there is a webcam connected or not
        function hasGetUserMedia() {
            return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);
        }

        window.onload = function() {
            if(hasGetUserMedia()){
                var Minutes = ({{examtime}} - Date.now())/1000;
                display = document.querySelector('#time');
                startTimer(Minutes, display);
                var constraints = { audio: true,
                                    video: true};
                navigator.getMedia = ( navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia ||
                                    navigator.msGetUserMedia);
                navigator.mediaDevices.getUserMedia(constraints).then(function(mediaStream){
                    var video = document.querySelector('#video');
                    video.srcObject = mediaStream;
                    video.play();
                }).catch(function(err){
                    alert('Error! Media Devices were not found/allowed.');
                });
            } else {
                alert('Your browser is not allowing us to access webcam/mic.');
            }
        }
        /* Timer Functionality */
        function startTimer(duration, display) {
            var start = Date.now(),
                diff,
                minutes,
                seconds;
            function timer() {
                // get the number of seconds that have elapsed since 
                // startTimer() was called
                diff = duration - (((Date.now() - start) / 1000) | 0);

                // does the same job as parseInt truncates the float
                minutes = (diff / 60) | 0;
                seconds = (diff % 60) | 0;

                minutes = minutes < 10 ? "0" + minutes : minutes;
                seconds = seconds < 10 ? "0" + seconds : seconds;

                display.textContent = minutes + ":" + seconds; 

                if (diff <= 0) {
                    // add one second so that the count down starts at the full duration
                    //--->start = Date.now() + 1000;
                    // ---> submit the form at alert("times up");
                    alert("Hey. Times Up. We are saving your responses now. Thanks for taking this exam.");
                    clearInterval(pagetimer);
                    $("#submitbutton").click();
                }
            };
            // we don't want to wait a full second before the timer starts
            timer();
            var pagetimer = setInterval(timer, 1000);

        }
    </script>
    <!-- ==================================== Directed Interview Questions ====================================-->
    <script>
        var player = videojs("diq", {
            controls: true,
            width: 320,
            height: 240,
            fluid: false,
            plugins: {
                record: {
                    audio: true,
                    video: true,
                    maxLength: 180,
                    debug: true
                }
            }
        }, function(){
            var msg = 'Using video.js ' + videojs.VERSION +
                ' with videojs-record ' + videojs.getPluginVersion('record') +
                ' and recordrtc ' + RecordRTC.version;
            videojs.log(msg);
        });
        player.on('deviceError', function() {
            console.log('device error:', player.deviceErrorCode);
        });
        player.on('deviceReady', function() {
            console.log('The webcam and/or microphone is ready to use!');
            player.record().start();
        });
        player.on('error', function(error) {
            console.log('error:', error);
        });
        player.on('startRecord', function() {
            console.log('started recording!');
        });
        // user completed recording and stream is available
        player.on('finishRecord', function() {
            console.log('finished recording: ', player.recordedData);
            var formData = new FormData();
            formData.append('audiovideo', player.recordedData.video);
            xhr('/user/exam/speaking/upload/{{examid}}/1', formData, function (fName) {
                console.log("Video succesfully uploaded !", fName);
                $("#wrapper_1").html('<button type="button" class="btn btn-warning disabled">Answer Saved <span class="badge badge-light"><i class="far fa-check-circle"></i></span></button>')
            });
            function xhr(url, data, callback) {
                var request = new XMLHttpRequest();
                request.onreadystatechange = function () {
                    if (request.readyState == 4 && request.status == 200) {
                        callback(location.href + request.responseText);
                    }
                };
                request.open('POST', url);
                request.send(data);
            }
        });
        function startdiq(x){
            $("#wrapper_1").show();
            player.record().getDevice();
            $("#"+x).hide();
        }
        function stopdiq(){
            player.record().stop();
        }
        </script>
        <!-- ====================================== DIQ Ended -X-X-X- IQ Starts ================================== -->
        <script>
            var player2 = videojs("iq", {
                controls: true,
                width: 320,
                height: 240,
                fluid: false,
                plugins: {
                    record: {
                        audio: true,
                        video: true,
                        maxLength: 180,
                        debug: true
                    }
                }
            }, function(){
                var msg = 'Using video.js ' + videojs.VERSION +
                    ' with videojs-record ' + videojs.getPluginVersion('record') +
                    ' and recordrtc ' + RecordRTC.version;
                videojs.log(msg);
            });
            player2.on('deviceError', function() {
                console.log('device error:', player2.deviceErrorCode);
            });
            player2.on('deviceReady', function() {
                console.log('The webcam and/or microphone is ready to use!');
                player2.record().start();
            });
            player2.on('error', function(error) {
                console.log('error:', error);
            });
            player2.on('startRecord', function() {
                console.log('started recording!');
            });
            // user completed recording and stream is available
            player2.on('finishRecord', function() {
                console.log('finished recording: ', player2.recordedData);
                var formData = new FormData();
                formData.append('audiovideo', player2.recordedData.video);
                xhr('/user/exam/speaking/upload/{{examid}}/2', formData, function (fName) {
                    console.log("Video succesfully uploaded !", fName);
                    $("#wrapper_2").html('<button type="button" class="btn btn-warning disabled">Answer Saved <span class="badge badge-light"><i class="far fa-check-circle"></i></span></button>')
                });
                function xhr(url, data, callback) {
                    var request = new XMLHttpRequest();
                    request.onreadystatechange = function () {
                        if (request.readyState == 4 && request.status == 200) {
                            callback(location.href + request.responseText);
                        }
                    };
                    request.open('POST', url);
                    request.send(data);
                }
            });
            function startiq(x){
                $("#wrapper_2").show();
                player2.record().getDevice();
                $("#"+x).hide();
            }
            function stopiq(){
                player2.record().stop();
            }
        </script>
        <!-- ====================================== IQ Ended -X-X-X- POV Starts ================================== -->
        <script>
            var player3 = videojs("pov", {
                controls: true,
                width: 320,
                height: 240,
                fluid: false,
                plugins: {
                    record: {
                        audio: true,
                        video: true,
                        maxLength: 180,
                        debug: true
                    }
                }
            }, function(){
                var msg = 'Using video.js ' + videojs.VERSION +
                    ' with videojs-record ' + videojs.getPluginVersion('record') +
                    ' and recordrtc ' + RecordRTC.version;
                videojs.log(msg);
            });
            player3.on('deviceError', function() {
                console.log('device error:', player3.deviceErrorCode);
            });
            player3.on('deviceReady', function() {
                console.log('The webcam and/or microphone is ready to use!');
                player3.record().start();
            });
            player3.on('error', function(error) {
                console.log('error:', error);
            });
            player3.on('startRecord', function() {
                console.log('started recording!');
            });
            // user completed recording and stream is available
            player3.on('finishRecord', function() {
                console.log('finished recording: ', player3.recordedData);
                var formData = new FormData();
                formData.append('audiovideo', player3.recordedData.video);
                xhr('/user/exam/speaking/upload/{{examid}}/3', formData, function (fName) {
                    console.log("Video succesfully uploaded !", fName);
                    $("#wrapper_3").html('<button type="button" class="btn btn-warning disabled">Answer Saved <span class="badge badge-light"><i class="far fa-check-circle"></i></span></button>')
                });
                function xhr(url, data, callback) {
                    var request = new XMLHttpRequest();
                    request.onreadystatechange = function () {
                        if (request.readyState == 4 && request.status == 200) {
                            callback(location.href + request.responseText);
                        }
                    };
                    request.open('POST', url);
                    request.send(data);
                }
            });
            function startpov(x){
                $("#wrapper_3").show();
                player3.record().getDevice();
                $("#"+x).hide();
            }
            function stoppov(){
                player3.record().stop();
            }
        </script>
        <script>
        $(document).ready(function() {
            $('#submitbutton').click(function(){
                // Check if any of the player is still recording. 
                // if yes. stop it ---> stopping it will save the video.
                // then redirect to finish page. 
                if(player.record().isRecording()){
                    player.record().stop();
                }
                if(player2.record().isRecording()){
                    player2.record().stop();
                }
                if(player3.record().isRecording()){
                    player3.record().stop();
                }
                window.location.href="/user/exam/finish/{{examid}}";
            });
        });
        </script>
</body>

</html>